@page "/candlestick"
@using AutoMapper
@using Bronto.Models.Api
@using Bronto.Stocks.Pwa.Components
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@using ScottPlot
@using ScottPlot.Blazor
@* @using System.Timers *@
@inject IStockService stockService

<h1>ScottPlot 5 in Blazor</h1>
<h2>Financial Plot</h2>
<h3>Candlestick Chart</h3>

<h3>Select a Stock Symbol</h3>

<StockCombo @bind-SelectedStockSymbol="SelectedStockSymbol" />

<p>Selected Stock Symbol: @_selectedStockSymbol</p>

@code {
    private Timer? timer = null;

    private string _selectedStockSymbol ="AAPL";

    public string SelectedStockSymbol {
        get => _selectedStockSymbol;
        set
        {
            _selectedStockSymbol = value ?? "AAPL";
            _ = LoadChart();
            //StateHasChanged();
            // DisposeTimer();
            // //ShowMessageBar the debounce time in ms to the timer below
            // timer = new Timer(400);
            // timer.Elapsed += TimerElapsed_TickAsync;
            // timer.Enabled = true;
            // timer.Start();
        }
    } 
}
<p>You chose: @SelectedStockSymbol</p>
@if (StockDataList is null)
{
    <p>Populating ...</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
}
else if (!StockDataList.Values.Any())
{
    <p>Loading ...</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
}
else if (loadFailed)
{
    <p>Failed to load data.</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
}
else
{
    <p>Symbol: @StockDataList.Symbol</p>
    <p>Interval: @StockDataList.Interval</p>
    <p>Updated: @StockDataList.Values[0].Datetime</p>
}

<FluentDesignTheme @bind-Mode="@Mode" StorageName="theme" />

<BlazorPlot @ref=BlazorPlot Style="width: 400px; height: 300px;" />
<button @onclick="()=>Clear()">Clear</button>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Open</th>
            <th>High</th>
            <th>Low</th>
            <th>Close</th>
        </tr>
    </thead>
    <tbody>
        @if (prices is not null)
        {
             @foreach (var price in prices)
            {
                <tr>
                    <td>@price.DateTime.ToShortDateString()</td>
                    <td>@price.Open</td>
                    <td>@price.High</td>
                    <td>@price.Low</td>
                    <td>@price.Close</td>
                </tr>
            }       
        }
    </tbody>
</table>

@code {
    private bool loadFailed;
    private StockDataTimeSeries StockDataList { get; set; }
    private List<OHLC> prices { get; set; }
    public DesignThemeModes Mode { get; set; }
    BlazorPlot BlazorPlot { get; set; } = new();

    // protected override async Task OnInitializedAsync()
    // {
    //     await LoadData();
    //     await base.OnInitializedAsync();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Perform initialization logic here
            await LoadChart();
        }
    }

    private async Task LoadChart()
    {
        // get and plot time series price data
        try
        {
            BlazorPlot.Plot.Clear();
            loadFailed = false;
            await LoadData();
            BlazorPlot.Refresh();
            StateHasChanged();
            // await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadData()
    {
        prices = null;
        prices = await GetStocks(_selectedStockSymbol);
        //await RefreshPlot();

        //StateHasChanged();
        // BlazorPlot.Reset();
        BlazorPlot.Plot.Add.Candlestick(prices);
        BlazorPlot.Plot.Axes.DateTimeTicksBottom();
        BlazorPlot.Plot.XLabel("Time");
        BlazorPlot.Plot.YLabel("Price");
        BlazorPlot.Plot.Title("Candlestick");

        if (Mode == DesignThemeModes.Dark)
        {
            // change figure colors
            BlazorPlot.Plot.FigureBackground.Color = ScottPlot.Color.FromHex("#181818");
            BlazorPlot.Plot.DataBackground.Color = ScottPlot.Color.FromHex("#1f1f1f");

            // change axis and grid colors
            BlazorPlot.Plot.Axes.Color(ScottPlot.Color.FromHex("#d7d7d7"));
            BlazorPlot.Plot.Grid.MajorLineColor = ScottPlot.Color.FromHex("#404040");

            // change legend colors
            BlazorPlot.Plot.Legend.BackgroundColor = ScottPlot.Color.FromHex("#404040");
            BlazorPlot.Plot.Legend.FontColor = ScottPlot.Color.FromHex("#d7d7d7");
            BlazorPlot.Plot.Legend.OutlineColor = ScottPlot.Color.FromHex("#d7d7d7");
        };
    }

    private void Clear()
    {
        BlazorPlot.Plot.Clear();
        StateHasChanged();
    }

    // protected async Task RefreshPlot()
    // {
    //     BlazorPlot.Plot.Clear();
    //     BlazorPlot.Plot.Add.Candlestick(prices);
    //     BlazorPlot.Plot.Axes.DateTimeTicksBottom();
    //     BlazorPlot.Plot.XLabel("Time");
    //     BlazorPlot.Plot.YLabel("Price");
    //     BlazorPlot.Plot.Title("Candlestick");

    //     if (Mode == DesignThemeModes.Dark)
    //     {
    //         // change figure colors
    //         BlazorPlot.Plot.FigureBackground.Color = ScottPlot.Color.FromHex("#181818");
    //         BlazorPlot.Plot.DataBackground.Color = ScottPlot.Color.FromHex("#1f1f1f");

    //         // change axis and grid colors
    //         BlazorPlot.Plot.Axes.Color(ScottPlot.Color.FromHex("#d7d7d7"));
    //         BlazorPlot.Plot.Grid.MajorLineColor = ScottPlot.Color.FromHex("#404040");

    //         // change legend colors
    //         BlazorPlot.Plot.Legend.BackgroundColor = ScottPlot.Color.FromHex("#404040");
    //         BlazorPlot.Plot.Legend.FontColor = ScottPlot.Color.FromHex("#d7d7d7");
    //         BlazorPlot.Plot.Legend.OutlineColor = ScottPlot.Color.FromHex("#d7d7d7");
    //     };

    //     BlazorPlot.Refresh();
    //     StateHasChanged();
    //     await base.OnInitializedAsync();
    // }

    protected async Task<List<OHLC>> GetStocks(string symbol)
    {        
        StockDataList = await stockService.GetTimeSeriesAsync(symbol, "1day", "30");
        
        @if (StockDataList != null)
        {
            // Use AutoMapper mapping ScottPlot's OHLC
            var config = new MapperConfiguration(cfg => cfg.CreateMap<TimeSeriesValues, OHLC>());
            var mapper = config.CreateMapper();
            prices = mapper.Map<List<OHLC>>(StockDataList.Values.ToList());
        }

        return prices;
    }

    // private async void TimerElapsed_TickAsync(object? sender, EventArgs e)
    // {
    //     DisposeTimer();
    //     await InvokeAsync(OnSearch);
    // }

    // private void DisposeTimer()
    // {
    //     if (timer != null)
    //     {
    //         timer.Enabled = false;
    //         timer.Elapsed -= TimerElapsed_TickAsync;
    //         timer.Dispose();
    //         timer = null;
    //     }
    // }

    // private void HandleClear()
    // {
    //     if (string.IsNullOrWhiteSpace(SelectedStockSymbol))
    //         return;

    //     DisposeTimer();
    //     // searchResults = defaultResults();
    //     // SearchValue = string.Empty;
    //     StateHasChanged();
    // }

    // private void OnSearch()
    // {
    //     if (!string.IsNullOrWhiteSpace(SelectedStockSymbol))
    //     {
    //         // string searchTerm = SearchValue.ToLower();

    //         // List<string> temp = priceService.Symbols.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
    //         // if (temp.Count() > 0)
    //         // {
    //         //     searchResults = temp;
    //         // }
    //         // else
    //         // {
    //         //     searchResults = defaultResults();
    //         // }
    //         _ = LoadChart();
    //         StateHasChanged();
    //     }
    //     else
    //     {
    //         // searchResults = defaultResults();
    //         StateHasChanged();
    //     }
    // }
}