@page "/candlestick"
@using AutoMapper
@using Bronto.Models.Api
@using Bronto.Stocks.Pwa.Components
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@using ScottPlot
@using ScottPlot.Blazor
@inject IStockService stockService

<h1>ScottPlot 5 in Blazor</h1>
<h2>Financial Plot</h2>
<h3>Candlestick Chart</h3>

<h3>Select a Stock Symbol</h3>

<StockCombo @bind-SelectedStockSymbol="SelectedStockSymbol" />

<p>Selected Stock Symbol: @_selectedStockSymbol</p>

@code {
    private string _selectedStockSymbol ="AAPL";

    public string SelectedStockSymbol {
        get => _selectedStockSymbol;
        set
        {
            _selectedStockSymbol = value ?? "AAPL";
            _ = LoadData();
            //BlazorPlot.Refresh();
            // GetStocks(_selectedStockSymbol);
        }
    } 
}

@if (StockDataList is null)
{
    <p>Populating ...</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
}
else if (!StockDataList.Values.Any())
{
    <p>Loading ...</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
}
else if (loadFailed)
{
    <p>Failed to load data.</p>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
}
else
{
    <p>Symbol: @StockDataList.Symbol</p>
    <p>Interval: @StockDataList.Interval</p>
    <p>Updated: @StockDataList.Values[0].Datetime</p>
}

<FluentDesignTheme @bind-Mode="@Mode" StorageName="theme" />

<BlazorPlot @ref=BlazorPlot Style="width: 400px; height: 300px;" />

@code {
    private bool loadFailed;
    private StockDataTimeSeries StockDataList { get; set; }
    private List<OHLC> prices { get; set; }
    public DesignThemeModes Mode { get; set; }
    BlazorPlot BlazorPlot { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await base.OnInitializedAsync();
    }
    
    private async Task LoadData()
    {
        // get and plot time series price data
        try
        {
            loadFailed = false;
            prices = null;
            prices = await GetStocks(_selectedStockSymbol);
            await RefreshPlot();
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine(ex.Message);
        }        
    }

    protected async Task RefreshPlot()
    {
        BlazorPlot.Plot.Clear();
        BlazorPlot.Plot.Add.Candlestick(prices);
        BlazorPlot.Plot.Axes.DateTimeTicksBottom();
        BlazorPlot.Plot.XLabel("Time");
        BlazorPlot.Plot.YLabel("Price");
        BlazorPlot.Plot.Title("Candlestick");

        if (Mode == DesignThemeModes.Dark)
        {
            // change figure colors
            BlazorPlot.Plot.FigureBackground.Color = ScottPlot.Color.FromHex("#181818");
            BlazorPlot.Plot.DataBackground.Color = ScottPlot.Color.FromHex("#1f1f1f");

            // change axis and grid colors
            BlazorPlot.Plot.Axes.Color(ScottPlot.Color.FromHex("#d7d7d7"));
            BlazorPlot.Plot.Grid.MajorLineColor = ScottPlot.Color.FromHex("#404040");

            // change legend colors
            BlazorPlot.Plot.Legend.BackgroundColor = ScottPlot.Color.FromHex("#404040");
            BlazorPlot.Plot.Legend.FontColor = ScottPlot.Color.FromHex("#d7d7d7");
            BlazorPlot.Plot.Legend.OutlineColor = ScottPlot.Color.FromHex("#d7d7d7");
        };

        BlazorPlot.Refresh();
        await base.OnInitializedAsync();
    }

    protected async Task<List<OHLC>> GetStocks(string symbol)
    {
        
        StockDataList = await stockService.GetTimeSeriesAsync(symbol, "1day", "30");
        
        @if (StockDataList != null)
        {
            // Use AutoMapper mapping ScottPlot's OHLC
            var config = new MapperConfiguration(cfg => cfg.CreateMap<TimeSeriesValues, OHLC>());
            var mapper = config.CreateMapper();
            prices = mapper.Map<List<OHLC>>(StockDataList.Values.ToList());
        }
        return prices;
    }
}