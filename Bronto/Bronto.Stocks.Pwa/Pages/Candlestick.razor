@page "/candlestick"
@using AutoMapper
@using Bronto.Models
@using Bronto.Models.Api
@using Bronto.Models.Api.Chart
@using Bronto.Models.Enums
@using Bronto.Shared
@using Bronto.Stocks.Pwa.Components
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@using ScottPlot
@using ScottPlot.Blazor
@using System.Globalization
@inject IChartService chartService

<h1>ScottPlot 5 in Blazor</h1>
<h2>Financial Plot</h2>
<h3>Candlestick Chart</h3>
<h3>Select a Stock Symbol</h3>

<StockCombo @bind-SelectedStockSymbol="SelectedStockSymbol" />

<p>Selected Stock Symbol: @_selectedStockSymbol</p>

@if (loadFailed)
{
    <p><span style="color: red;">@errorMessage</span></p>
}
else if (ChartDataList is null)
{
    <p>Populating ...</p>
}
else if (!ChartDataList.Chart.Result.Any())
{
    <p>Loading ...</p>
}
else
{  
    <p>Symbol: @ChartDataList.Chart.Result[0].Meta.Symbol</p>
    <p>Interval: @ChartDataList.Chart.Result[0].Meta.Range</p>
    <p>Updated: @UnixTimestampCalculator.ToDateTime(ChartDataList.Chart.Result[0].Meta.RegularMarketTime)</p>
    <p><button @onclick="()=>Clear()">Clear</button></p>
    <div>
        <span>Stock Price: @regularMarketPrice.ToString("C", CultureInfo.CurrentCulture)</span>
        <span style="color: @ChangeColor;">@ChangeString</span>
        <span style="color: @ChangeColor;">(@PercentageChangeString)</span>
    </div>
    <FluentStack HorizontalGap="10">
        <FluentButton Appearance="Appearance.Outline" OnClick="()=>LoadChart(_selectedStockSymbol, Interval, StockRange.OneDay.GetStringValue())">1d</FluentButton>
        <FluentButton Appearance="Appearance.Outline" OnClick="()=>LoadChart(_selectedStockSymbol, Interval, StockRange.FiveDays.GetStringValue())">5d</FluentButton>
        <FluentButton Appearance="Appearance.Outline" OnClick="()=>LoadChart(_selectedStockSymbol, Interval, StockRange.OneMonth.GetStringValue())">1M</FluentButton>
    </FluentStack>
}

<FluentDesignTheme @bind-Mode="@Mode" StorageName="theme" />

<BlazorPlot @ref=BlazorPlot Style="width: 400px; height: 300px;" />

<table class="table table-striped-columns table-bordered">
    <thead>
        <tr>
            <th scope="col">Date</th>
            <th scope="col">Open</th>
            <th scope="col">High</th>
            <th scope="col">Low</th>
            <th scope="col">Close</th>
        </tr>
    </thead>
    <tbody>
        @if (prices is not null)
        {
            @foreach (var price in prices)
            {
                <tr>
                    <th scope="row">@price.DateTime.ToShortDateString()</th>
                    <td>@price.Open.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                    <td>@price.High.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                    <td>@price.Low.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                    <td>@price.Close.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private bool loadFailed;
    private string errorMessage;
    private ChartResult ChartDataList { get; set; }
    private List<OHLC> prices { get; set; }
    private string _selectedStockSymbol = "AAPL";

    public string SelectedStockSymbol
    {
        get => _selectedStockSymbol;
        set
        {
            _selectedStockSymbol = value ?? "AAPL";
            _ = LoadChart(_selectedStockSymbol, Interval, Range);
        }
    }

    public string Interval { get; set; } = "1d";
    public string Range { get; set; } = "5d";
    public DesignThemeModes Mode { get; set; }
    
    BlazorPlot BlazorPlot { get; set; } = new();

    // Display Price change data
    private double regularMarketPrice;
    private double chartPreviousClose;
    private double Change => regularMarketPrice - chartPreviousClose;
    private double PercentageChange => (Change / chartPreviousClose) * 100;
    private string ChangeString => Change > 0 ? $"+{Change:F2}" : $"{Change:F2}";
    private string PercentageChangeString => Change > 0 ? $"+{PercentageChange:F2}%" : $"{PercentageChange:F2}%";
    private string ChangeColor => Change > 0 ? "green" : "red";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadChart(_selectedStockSymbol, Interval, Range);
        }
    }

    // get and plot time series price data
    private async Task LoadChart(string symbol, string interval, string range)
    {
        try
        {
            BlazorPlot.Plot.Clear();
            loadFailed = false;
            await LoadData(symbol, interval, range);
            BlazorPlot.Refresh();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loadFailed = true;
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task LoadData(string symbol, string interval, string range)
    {
        prices = null;
        prices = await GetStocks(symbol, interval, range);

        regularMarketPrice = ChartDataList.Chart.Result[0].Meta.RegularMarketPrice;
        chartPreviousClose = ChartDataList.Chart.Result[0].Meta.ChartPreviousClose;

        BlazorPlot.Plot.Add.Candlestick(prices);
        BlazorPlot.Plot.Axes.DateTimeTicksBottom();
        BlazorPlot.Plot.XLabel("Time");
        BlazorPlot.Plot.YLabel("Price");
        BlazorPlot.Plot.Title("Candlestick");

        if (Mode == DesignThemeModes.Dark)
        {
            // change figure colors
            BlazorPlot.Plot.FigureBackground.Color = ScottPlot.Color.FromHex("#181818");
            BlazorPlot.Plot.DataBackground.Color = ScottPlot.Color.FromHex("#1f1f1f");

            // change axis and grid colors
            BlazorPlot.Plot.Axes.Color(ScottPlot.Color.FromHex("#d7d7d7"));
            BlazorPlot.Plot.Grid.MajorLineColor = ScottPlot.Color.FromHex("#404040");

            // change legend colors
            BlazorPlot.Plot.Legend.BackgroundColor = ScottPlot.Color.FromHex("#404040");
            BlazorPlot.Plot.Legend.FontColor = ScottPlot.Color.FromHex("#d7d7d7");
            BlazorPlot.Plot.Legend.OutlineColor = ScottPlot.Color.FromHex("#d7d7d7");
        };
    }

    protected async Task<List<OHLC>> GetStocks(string symbol, string interval, string range)
    {
        ChartDataList = await chartService.GetChartData(symbol, interval, range);

        @if (ChartDataList != null && ChartDataList.StatusCodeType == Enums.StockDataClientResponseStatus.Ok)
        {
            List<OHLC> ohlcList = ChartDataList.Chart.Result[0].Indicators.Quote[0].Open
                .Select((open, index) => new OHLC
                    {
                        Open = open,
                        High = ChartDataList.Chart.Result[0].Indicators.Quote[0].High[index],
                        Low = ChartDataList.Chart.Result[0].Indicators.Quote[0].Low[index],
                        Close = ChartDataList.Chart.Result[0].Indicators.Quote[0].Close[index],
                        DateTime = UnixTimestampCalculator.ToDateTime(ChartDataList.Chart.Result[0].Timestamp[index]),
                        TimeSpan = TimeSpan.FromDays(1.0)
                    })
                .ToList();

            prices = ohlcList; 
        }
        else if (ChartDataList.StatusCodeType == Enums.StockDataClientResponseStatus.RateLimitExceeded)
        {
            loadFailed = true;
            errorMessage = $"Error: {ChartDataList.StatusCodeType} {ChartDataList.StatusMessage}";
            prices = null;
            StateHasChanged();
        }

        return prices;
    }

    private void Clear()
    {
        BlazorPlot.Plot.Clear();
        BlazorPlot.Refresh();
        loadFailed = false;
        prices = null;
        StateHasChanged();
    }
}