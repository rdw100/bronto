@page "/candlestick"
@using AutoMapper
@using Bronto.Models
@using Bronto.Models.Api
@using Bronto.Models.Api.Chart
@using Bronto.Stocks.Pwa.Components
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@using ScottPlot
@using ScottPlot.Blazor
@using System.Globalization
@inject IChartService chartService

<h1>ScottPlot 5 in Blazor</h1>
<h2>Financial Plot</h2>
<h3>Candlestick Chart</h3>

<h3>Select a Stock Symbol</h3>

<StockCombo @bind-SelectedStockSymbol="SelectedStockSymbol" />

<p>Selected Stock Symbol: @_selectedStockSymbol</p>

@code {
    private Timer? timer = null;

    private string _selectedStockSymbol = "AAPL";

    public string SelectedStockSymbol
    {
        get => _selectedStockSymbol;
        set
        {
            _selectedStockSymbol = value ?? "AAPL";
            _ = LoadChart();
        }
    }
}

<p>You chose: @SelectedStockSymbol</p>

@if (loadFailed)
{
    <p><span style="color: red;">@errorMessage</span></p>
}
else if (ChartDataList is null)
{
    <p>Populating ...</p>
}
else if (!ChartDataList.Chart.Result.Any())
{
    <p>Loading ...</p>
}
else
{
    <p>Symbol: @_selectedStockSymbol</p>    
    <p>Symbol: @ChartDataList.Chart.Result[0].Meta.Symbol</p>
    <p>Interval: @ChartDataList.Chart.Result[0].Meta.Range</p>
    <p>Updated: @UnixTimeStampToDateTime(ChartDataList.Chart.Result[0].Meta.RegularMarketTime)</p>
    <p><button @onclick="()=>Clear()">Clear</button></p>
}

<FluentDesignTheme @bind-Mode="@Mode" StorageName="theme" />

<BlazorPlot @ref=BlazorPlot Style="width: 400px; height: 300px;" />

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Open</th>
            <th>High</th>
            <th>Low</th>
            <th>Close</th>
        </tr>
    </thead>
    <tbody>
        @if (prices is not null)
        {
            @foreach (var price in prices)
            {
                <tr>
                    <td>@price.DateTime.ToShortDateString()</td>
                    <td>@price.Open.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                    <td>@price.High.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                    <td>@price.Low.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                    <td>@price.Close.ToString("C", CultureInfo.GetCultureInfo("en-US"))</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private bool loadFailed;
    private string errorMessage;
    private ChartResult ChartDataList { get; set; }
    private List<OHLC> prices { get; set; }
    public DesignThemeModes Mode { get; set; }
    BlazorPlot BlazorPlot { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadChart();
        }
    }

    // get and plot time series price data
    private async Task LoadChart()
    {
        try
        {
            BlazorPlot.Plot.Clear();
            loadFailed = false;
            await LoadData();
            BlazorPlot.Refresh();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loadFailed = true;
        }
    }

    private async Task LoadData()
    {
        prices = null;
        prices = await GetStocks(_selectedStockSymbol);

        BlazorPlot.Plot.Add.Candlestick(prices);
        BlazorPlot.Plot.Axes.DateTimeTicksBottom();
        BlazorPlot.Plot.XLabel("Time");
        BlazorPlot.Plot.YLabel("Price");
        BlazorPlot.Plot.Title("Candlestick");

        if (Mode == DesignThemeModes.Dark)
        {
            // change figure colors
            BlazorPlot.Plot.FigureBackground.Color = ScottPlot.Color.FromHex("#181818");
            BlazorPlot.Plot.DataBackground.Color = ScottPlot.Color.FromHex("#1f1f1f");

            // change axis and grid colors
            BlazorPlot.Plot.Axes.Color(ScottPlot.Color.FromHex("#d7d7d7"));
            BlazorPlot.Plot.Grid.MajorLineColor = ScottPlot.Color.FromHex("#404040");

            // change legend colors
            BlazorPlot.Plot.Legend.BackgroundColor = ScottPlot.Color.FromHex("#404040");
            BlazorPlot.Plot.Legend.FontColor = ScottPlot.Color.FromHex("#d7d7d7");
            BlazorPlot.Plot.Legend.OutlineColor = ScottPlot.Color.FromHex("#d7d7d7");
        };
    }

    protected async Task<List<OHLC>> GetStocks(string symbol)
    {
        ChartDataList = await chartService.GetChartData(symbol);

        @if (ChartDataList != null && ChartDataList.ResponseStatus == Enums.StockDataClientResponseStatus.Ok)
        {
            List<OHLC> ohlcList = ChartDataList.Chart.Result[0].Indicators.Quote[0].Open
                .Select((open, index) => new OHLC
                    {
                        Open = open,
                        High = ChartDataList.Chart.Result[0].Indicators.Quote[0].High[index],
                        Low = ChartDataList.Chart.Result[0].Indicators.Quote[0].Low[index],
                        Close = ChartDataList.Chart.Result[0].Indicators.Quote[0].Close[index],
                        DateTime = UnixTimeStampToDateTime(ChartDataList.Chart.Result[0].Timestamp[index]),
                        TimeSpan = TimeSpan.FromDays(1.0)
                    })
                .ToList();

            prices = ohlcList; 
        }
        else if (ChartDataList.ResponseStatus == Enums.StockDataClientResponseStatus.RateLimitExceeded)
        {
            loadFailed = true;
            errorMessage = $"Error: {ChartDataList.ResponseStatus} {ChartDataList.ResponseMessage}";
            prices = null;
            StateHasChanged();
        }

        return prices;
    }

    private void Clear()
    {
        BlazorPlot.Plot.Clear();
        StateHasChanged();
    }

    public static DateTime UnixTimeStampToDateTime(long unixTimeStamp)
    {
        // Unix timestamp is seconds past epoch (January 1, 1970)
        DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        DateTime dateTime = epoch.AddSeconds(unixTimeStamp).ToLocalTime();
        return dateTime;
    }
}