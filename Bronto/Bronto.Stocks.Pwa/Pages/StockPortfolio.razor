@page "/portfolio"
@using Bronto.Models
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@inject IToastService ToastService

<h3>My Stock Portfolio</h3>
<div>
    <input type="text" @bind="@stockSymbol" placeholder="Enter stock symbol" />
    <button @onclick="AddStock">Add Stock</button>
    <button @onclick="RemoveStock">Remove Stock</button>
</div>
<table>
    <thead>
        <tr>
            <th>Symbol</th>
        </tr>
    </thead>
    <tbody>        
        @foreach (var stock in PortfolioService.Stocks)
        {
            <tr>
                <td>@stock.Symbol</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string stockSymbol = string.Empty;
    private int counter = 1;
    [Inject] private IStockPortfolioService PortfolioService { get; set; }

    private void AddStock()
    {
        // Validate input (e.g., check if stockSymbol is not empty)
        if (!string.IsNullOrWhiteSpace(stockSymbol))
        {
            // Create a new stock with the entered symbol (you can customize this further)
            var newStock = new Stock
                {
                    Symbol = stockSymbol
                };

            // Add the stock to the portfolio
            PortfolioService.AddStock(newStock);
            ShowToast("Added", newStock.Symbol, ToastIntent.Success);
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
        }
    }

    private void RemoveStock()
    {
        if (!string.IsNullOrWhiteSpace(stockSymbol))
        {
            // Remove an existing stock with the entered symbol (you can customize this further)
            var oldStock = new Stock
                {
                    Symbol = stockSymbol
                };

            // Add the stock to the portfolio
            PortfolioService.RemoveStock(stockSymbol);
            ShowToast("Removed", oldStock.Symbol, ToastIntent.Success);
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
        }
    }

    private void StockExists(string symbol)
    {
        var exists = PortfolioService.StockExists(symbol);
        if (exists)
        {
            Console.WriteLine("Stock exists.");
        }
        else
        {
            Console.WriteLine("Stock does not exist.");
        }
    }

    void ShowToast(string action, string symbol, ToastIntent intent)
    {
        Random rnd = new();

        var message = $"{action} Stock {symbol} #{counter++}";
        ToastService.ShowToast(intent, message);
    }
}