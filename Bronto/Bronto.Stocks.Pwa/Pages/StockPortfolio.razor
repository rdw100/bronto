@page "/portfolio"
@using Bronto.Models
@using Bronto.Models.Api
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@inject IToastService ToastService
@inject IPriceService priceService

<h3>Search</h3>

<FluentAutocomplete TOption="String"
                    AutoComplete="off"
                    Autofocus="true"
                    Label="Select a stock"
                    Width="250px"
                    Placeholder="Select stocks"
                    OnOptionsSearch="@OnSearchAsync"
                    MaximumSelectedOptions="3"
                    OptionText="@(item => item)"
                    @bind-SelectedOptions="@SelectedItems" />

<p>
    <b>Selected</b>: @(String.Join(" - ", SelectedItems.Select(i => i)))
</p>

<table>
    <thead>
        <tr>
            <th>Symbol</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in SelectedItems)
        {
            <tr>
                <td>@item</td>
                <td>
                    <button @onclick="()=>AddStock(item)">Add Stock</button>
                    <button @onclick="()=>RemoveStock(item)">Remove Stock</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h3>My Stock Portfolio</h3>

<table>
    <thead>
        <tr>
            <th>Symbol</th>
        </tr>
    </thead>
    <tbody>
        @if (errorMessage != null)
        {
            <span style="color: red;">@errorMessage</span>
        }
        else if (errorMessage == null)
        {
            @foreach (var stock in PortfolioService.Stocks)
            {
                <tr>
                    <td>@stock.Symbol</td>
                    <td>
                        @stock.Price
                    </td>
                    <td>
                        <button @onclick="()=>GetStockPrice(stock.Symbol)">Get Stock Price</button>
                    </td>
                </tr>
            }            
        }
    </tbody>
</table>

@code {

    IEnumerable<String> SelectedItems = Array.Empty<String>();

    private async Task OnSearchAsync(OptionsSearchEventArgs<String> e)
    {
        e.Items = stockData.Where((i => i.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase)))
                                  .AsEnumerable();
    }

    private List<string> stockData = new()
    {
        "AAPL", "ABNB", "ABMD", "ACGL", "ADBE", "ADI", "ADP", "ADSK", "AEP", "ALGN", "ALXN", "AMAT", "AMGN", "AMZN", "ANSS", "ASML", "ATVI", "AVGO", "BIDU", "BIIB", "BKNG", "BMRN", "CDNS", "CDW", "CERN", "CHKP", "CHTR", "CMCSA", "COST", "CPRT", "CSCO", "CSGP", "CSX", "CTAS", "CTSH", "CTXS", "DOCU", "DXCM", "EA", "EBAY", "EXC", "FAST", "FB", "FISV", "FOX", "FOXA", "GILD", "GOOG", "GOOGL", "IDXX", "ILMN", "INCY", "INTC", "INTU", "ISRG", "JD", "KHC", "KLAC", "LRCX", "LULU", "LUMN", "MAR", "MCHP", "MDLZ", "MELI", "MNST", "MRNA", "MRVL", "MSFT", "MU", "MXIM", "NFLX", "NTES", "NVDA", "NXPI", "OKTA", "ORLY", "PAYX", "PCAR", "PDD", "PEP", "PTON", "PYPL", "QCOM", "REGN", "ROST", "SBUX", "SGEN", "SIRI", "SNPS", "SPLK", "SWKS", "TCOM", "TEAM", "TSLA", "TXN", "VRSK", "VRSN", "VRTX", "WBA", "WDAY", "XEL", "XLNX", "ZM"
    };

    private string errorMessage;
    private string stockSymbol = string.Empty;
    private int counter = 1;
    [Inject] private IStockPortfolioService PortfolioService { get; set; }

    private void AddStock(string symbol)
    {
        // Validate input (e.g., check if stockSymbol is not empty)
        if (!string.IsNullOrWhiteSpace(symbol))
        {
            // Create a new stock with the entered symbol
            var newStock = new Stock
                {
                    Symbol = symbol
                };

            // Add the stock to the portfolio
            PortfolioService.AddStock(newStock);
            ShowToast("Added", newStock.Symbol, ToastIntent.Success);
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
        }
    }

    private void RemoveStock(string symbol)
    {
        if (!string.IsNullOrWhiteSpace(symbol))
        {
            // Remove an existing stock with the entered symbol
            var oldStock = new Stock
                {
                    Symbol = symbol
                };

            // Add the stock to the portfolio
            PortfolioService.RemoveStock(oldStock);
            ShowToast("Removed", oldStock.Symbol, ToastIntent.Success);
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
        }
    }

    private void StockExists(string symbol)
    {
        var exists = PortfolioService.StockExists(symbol);
        if (exists)
        {
            Console.WriteLine("Stock exists.");
        }
        else
        {
            Console.WriteLine("Stock does not exist.");
        }
    }

    void ShowToast(string action, string symbol, ToastIntent intent)
    {
        Random rnd = new();

        var message = $"{action} Stock {symbol} #{counter++}";
        ToastService.ShowToast(intent, message);
    }

    private List<string> searchData = new()
    {
        "AAPL", "ABNB", "ABMD", "ACGL", "ADBE", "ADI", "ADP", "ADSK", "AEP", "ALGN", "ALXN", "AMAT", "AMGN", "AMZN", "ANSS", "ASML", "ATVI", "AVGO", "BIDU", "BIIB", "BKNG", "BMRN", "CDNS", "CDW", "CERN", "CHKP", "CHTR", "CMCSA", "COST", "CPRT", "CSCO", "CSGP", "CSX", "CTAS", "CTSH", "CTXS", "DOCU", "DXCM", "EA", "EBAY", "EXC", "FAST", "FB", "FISV", "FOX", "FOXA", "GILD", "GOOG", "GOOGL", "IDXX", "ILMN", "INCY", "INTC", "INTU", "ISRG", "JD", "KHC", "KLAC", "LRCX", "LULU", "LUMN", "MAR", "MCHP", "MDLZ", "MELI", "MNST", "MRNA", "MRVL", "MSFT", "MU", "MXIM", "NFLX", "NTES", "NVDA", "NXPI", "OKTA", "ORLY", "PAYX", "PCAR", "PDD", "PEP", "PTON", "PYPL", "QCOM", "REGN", "ROST", "SBUX", "SGEN", "SIRI", "SNPS", "SPLK", "SWKS", "TCOM", "TEAM", "TSLA", "TXN", "VRSK", "VRSN", "VRTX", "WBA", "WDAY", "XEL", "XLNX", "ZM"
    };

    private async Task<RealTimePrice> GetStockPrice(string symbol)
    {
        RealTimePrice price = null;
        try
        {
            errorMessage = null; // Clear any previous error message
            price = await priceService.GetPriceAsync(symbol);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        return price;
    }
}