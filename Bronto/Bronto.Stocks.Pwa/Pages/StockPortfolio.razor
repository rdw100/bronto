@page "/portfolio"
@using Bronto.Models
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@inject IToastService ToastService

<h3>My Stock Portfolio</h3>


    <FluentAutocomplete TOption="String"
                        AutoComplete="off"
                        Autofocus="true"
                        Label="Select a stock"
                        Width="250px"
                        Placeholder="Select stocks"
                        OnOptionsSearch="@OnSearchAsync"
                        MaximumSelectedOptions="5"
                        OptionText="@(item => item)"
                        @bind-SelectedOptions="@SelectedItems" />
<div>
    <p>
        <b>Selected</b>: @(String.Join(" - ", SelectedItems.Select(i => i)))
    </p>
</div>

<div>
    <input type="text" @bind="@stockSymbol" placeholder="Enter stock symbol" />
    <button @onclick="AddStock">Add Stock</button>
    <button @onclick="RemoveStock">Remove Stock</button>
</div>

<table>
    <thead>
        <tr>
            <th>Symbol</th>
        </tr>
    </thead>
    <tbody>        
        @foreach (var stock in PortfolioService.Stocks)
        {
            <tr>
                <td>@stock.Symbol</td>
            </tr>
        }
    </tbody>
</table>

@code {

    IEnumerable<String> SelectedItems = Array.Empty<String>();
    
    private async Task OnSearchAsync(OptionsSearchEventArgs<String> e)
    {
        e.Items = stockData.Where((i => i.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase)))
                                  .AsEnumerable();
    }

    private List<string> stockData = new()
    {
        "AAPL", "ABNB", "ABMD", "ACGL", "ADBE", "ADI", "ADP", "ADSK", "AEP", "ALGN", "ALXN", "AMAT", "AMGN", "AMZN", "ANSS", "ASML", "ATVI", "AVGO", "BIDU", "BIIB", "BKNG", "BMRN", "CDNS", "CDW", "CERN", "CHKP", "CHTR", "CMCSA", "COST", "CPRT", "CSCO", "CSGP", "CSX", "CTAS", "CTSH", "CTXS", "DOCU", "DXCM", "EA", "EBAY", "EXC", "FAST", "FB", "FISV", "FOX", "FOXA", "GILD", "GOOG", "GOOGL", "IDXX", "ILMN", "INCY", "INTC", "INTU", "ISRG", "JD", "KHC", "KLAC", "LRCX", "LULU", "LUMN", "MAR", "MCHP", "MDLZ", "MELI", "MNST", "MRNA", "MRVL", "MSFT", "MU", "MXIM", "NFLX", "NTES", "NVDA", "NXPI", "OKTA", "ORLY", "PAYX", "PCAR", "PDD", "PEP", "PTON", "PYPL", "QCOM", "REGN", "ROST", "SBUX", "SGEN", "SIRI", "SNPS", "SPLK", "SWKS", "TCOM", "TEAM", "TSLA", "TXN", "VRSK", "VRSN", "VRTX", "WBA", "WDAY", "XEL", "XLNX", "ZM"
    };

    private string stockSymbol = string.Empty;
    private int counter = 1;
    [Inject] private IStockPortfolioService PortfolioService { get; set; }

    private void AddStock()
    {
        // Validate input (e.g., check if stockSymbol is not empty)
        if (!string.IsNullOrWhiteSpace(stockSymbol))
        {
            // Create a new stock with the entered symbol
            var newStock = new Stock
                {
                    Symbol = stockSymbol
                };

            // Add the stock to the portfolio
            PortfolioService.AddStock(newStock);
            ShowToast("Added", newStock.Symbol, ToastIntent.Success);
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
        }
    }

    private void RemoveStock()
    {
        if (!string.IsNullOrWhiteSpace(stockSymbol))
        {
            // Remove an existing stock with the entered symbol
            var oldStock = new Stock
                {
                    Symbol = stockSymbol
                };

            // Add the stock to the portfolio
            PortfolioService.RemoveStock(stockSymbol);
            ShowToast("Removed", oldStock.Symbol, ToastIntent.Success);
        }
        else
        {
            ShowToast("Invalid", "is blank.", ToastIntent.Error);
        }
    }

    private void StockExists(string symbol)
    {
        var exists = PortfolioService.StockExists(symbol);
        if (exists)
        {
            Console.WriteLine("Stock exists.");
        }
        else
        {
            Console.WriteLine("Stock does not exist.");
        }
    }

    void ShowToast(string action, string symbol, ToastIntent intent)
    {
        Random rnd = new();

        var message = $"{action} Stock {symbol} #{counter++}";
        ToastService.ShowToast(intent, message);
    }

    private List<string> searchData = new()
    {
        "AAPL", "ABNB", "ABMD", "ACGL", "ADBE", "ADI", "ADP", "ADSK", "AEP", "ALGN", "ALXN", "AMAT", "AMGN", "AMZN", "ANSS", "ASML", "ATVI", "AVGO", "BIDU", "BIIB", "BKNG", "BMRN", "CDNS", "CDW", "CERN", "CHKP", "CHTR", "CMCSA", "COST", "CPRT", "CSCO", "CSGP", "CSX", "CTAS", "CTSH", "CTXS", "DOCU", "DXCM", "EA", "EBAY", "EXC", "FAST", "FB", "FISV", "FOX", "FOXA", "GILD", "GOOG", "GOOGL", "IDXX", "ILMN", "INCY", "INTC", "INTU", "ISRG", "JD", "KHC", "KLAC", "LRCX", "LULU", "LUMN", "MAR", "MCHP", "MDLZ", "MELI", "MNST", "MRNA", "MRVL", "MSFT", "MU", "MXIM", "NFLX", "NTES", "NVDA", "NXPI", "OKTA", "ORLY", "PAYX", "PCAR", "PDD", "PEP", "PTON", "PYPL", "QCOM", "REGN", "ROST", "SBUX", "SGEN", "SIRI", "SNPS", "SPLK", "SWKS", "TCOM", "TEAM", "TSLA", "TXN", "VRSK", "VRSN", "VRTX", "WBA", "WDAY", "XEL", "XLNX", "ZM"
    };
}