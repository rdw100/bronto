@page "/"
@using Bronto.Models.Api
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@using System.Timers;
@inject IPriceService priceService

<PageTitle>Home</PageTitle>

<h1>Financial Plot!</h1>

<p>Welcome to your new Fluent Blazor Financial Plot app.</p>

<p>Finance plots display price data binned into time ranges.</p>

<FluentSearch @ref=searchTest
              @bind-Value="SearchValue"
              @bind-Value:after="HandleClear"
              @oninput="@(e => SearchValue = e.Value?.ToString())"
              Placeholder="Search for Stock" />
<br />
<FluentListbox aria-label="search results"
               Items=@searchResults
               TOption="string"
               SelectedOptionChanged="@(e => SearchValue = (e != defaultResultsText ? e : string.Empty))"
               ValueChanged="@(e => ListboxValue = e)" />

<p>
    You searched for: @SearchValue
</p>

<h3>Portfolio</h3>

<p>
    Selected value: @ListboxValue
</p>

@foreach (var item in portfolioResults)
{
    <p>@item</p>
}

<h3>Stock Price</h3>

<input @bind="symbol" placeholder="Enter stock symbol" />

<button @onclick="()=>GetStockPrice(symbol)">Get Stock Price</button>

@if (errorMessage != null)
{
    <p style="color: red;">@errorMessage</p>
}
else if (stockPrice != null)
{
    <p>Stock: @symbol</p>
    <p>Price: @stockPrice.Price</p>
}

@code {
    private string symbol;
    private RealTimePrice stockPrice;
    private string errorMessage;
    private Timer? timer = null;
    private string? _listboxValue;
    public string? ListboxValue
    {
        get => _listboxValue;
        set
        {
            _listboxValue = value;
            portfolioResults.Add(_listboxValue);
        }
    }
    private FluentSearch? searchTest;

    private string? searchValue = string.Empty;

    private string? SearchValue
    {
        get => searchValue;
        set
        {
            if (value != searchValue)
            {
                searchValue = value;
                DisposeTimer();
                //ShowMessageBar the debounce time in ms to the timer below
                timer = new Timer(400);
                timer.Elapsed += TimerElapsed_TickAsync;
                timer.Enabled = true;
                timer.Start();
            }
        }
    }

    private List<string> searchResults = defaultResults();

    private List<string> portfolioResults = new();

    private static string defaultResultsText = "No results";

    private static List<string> defaultResults()
    {
        return new() { defaultResultsText };
    }

    private async void TimerElapsed_TickAsync(object? sender, EventArgs e)
    {
        DisposeTimer();
        await InvokeAsync(OnSearch);
    }

    private void DisposeTimer()
    {
        if (timer != null)
        {
            timer.Enabled = false;
            timer.Elapsed -= TimerElapsed_TickAsync;
            timer.Dispose();
            timer = null;
        }
    }

    private void OnSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchValue))
        {
            string searchTerm = SearchValue.ToLower();

            List<string> temp = priceService.Symbols.Where(str => str.ToLower().Contains(searchTerm)).Select(str => str).ToList();
            if (temp.Count() > 0)
            {
                searchResults = temp;
            }
            else
            {
                searchResults = defaultResults();
            }
            StateHasChanged();
        }
        else
        {
            searchResults = defaultResults();
            StateHasChanged();
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(SearchValue))
            return;

        DisposeTimer();
        searchResults = defaultResults();
        SearchValue = string.Empty;
        StateHasChanged();
    }

    private string _selectedValue = string.Empty;

    private async Task GetStockPrice(string symbol)
    {
        try
        {
            errorMessage = null; // Clear any previous error message
            stockPrice = await priceService.GetPriceAsync(symbol);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}