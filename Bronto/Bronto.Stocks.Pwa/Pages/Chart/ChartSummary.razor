@using Bronto.Models.Api.Quote
@using Bronto.Shared
@using Bronto.Stocks.Pwa.Interfaces
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Globalization
@inject IQuoteService quoteService

@if (Data != null)
{
    <FluentGrid Spacing="@Spacing" AdaptiveRendering="true" Justify="@Justification" Style=" padding: 4px; ">
        <FluentGridItem xs="12">
            <FluentCard >
                <h6>@Data.FullExchangeName - @Data.QuoteSourceName @Data.Currency</h6>

                <h4>
                    <span>@Data.LongName</span>
                    <span>(@Data.Symbol)</span>
                </h4>
            </FluentCard>
        </FluentGridItem>   
        <FluentGridItem xs="6" sm="3">
            <FluentCard >
                <h3>Market Price</h3>
                <h4>
                    <span>@Data.RegularMarketPrice.ToString("C", CultureInfo.CurrentCulture) @Data.Currency</span>
                    <span style="color: @ChangeColor;">@ChangeString</span>
                    <span style="color: @ChangeColor;">(@PercentageChangeString)</span>
                </h4>
                <h6>Updated: @UnixTimestampCalculator.ToDateTime(Data.RegularMarketTime)</h6>
            </FluentCard >
        </FluentGridItem>
        <FluentGridItem xs="6" sm="3">
            <FluentCard >
                <h3>Pre-Market Price</h3>
                <h4>
                    <span>@Data.PreMarketPrice.ToString("C", CultureInfo.CurrentCulture) @Data.Currency</span>
                    <span style="color: @PreChangeColor;">@PreChangeString</span>
                    <span style="color: @PreChangeColor;">(@PrePercentageChangeString)</span>
                </h4>
                <h6>Updated: @UnixTimestampCalculator.ToDateTime(Data.PreMarketTime)</h6>
            </FluentCard >
        </FluentGridItem>
        <FluentGridItem xs="6" sm="3">
            <FluentCard >
                <h3>52-Day Average</h3>
                <h4>
                    <span>@Data.FiftyDayAverage.ToString("C", CultureInfo.CurrentCulture) @Data.Currency</span>
                    <span style="color: @FiftyTwoChangeColor;">@FiftyTwoChangeString</span>
                    <span style="color: @FiftyTwoChangeColor;">(@FiftyTwoPercentageChangeString)</span>
                </h4>
            </FluentCard >
        </FluentGridItem>
        <FluentGridItem xs="6" sm="3">
            <FluentCard >
                <h3>200-Day Average</h3>
                <h4>
                    <span>@Data.TwoHundredDayAverage.ToString("C", CultureInfo.CurrentCulture) @Data.Currency</span>
                    <span style="color: @TwoHundredChangeColor;">@TwoHundredChangeString</span>
                    <span style="color: @TwoHundredChangeColor;">(@TwoHundredPercentageChangeString)</span>
                </h4>
            </FluentCard >
        </FluentGridItem>
    </FluentGrid>
}
else
{
    <p>Loading ...</p>
    <div style="width: 300px;display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgressRing></FluentProgressRing>
    </div>
}

@code {
    private Result Data { get; set; }

    [Parameter]
    public string Symbol { get; set; } 

    private double Change;
    private double PercentageChange;  
    private string ChangeString => Change > 0 ? $"+{Change:F2}" : $"{Change:F2}";
    private string PercentageChangeString => Change > 0 ? $"+{PercentageChange:F2}%" : $"{PercentageChange:F2}%";
    private string ChangeColor => Change > 0 ? "green" : "red";

    private double PreChange;
    private double PrePercentageChange;
    private string PreChangeString => Change > 0 ? $"+{Change:F2}" : $"{Change:F2}";
    private string PrePercentageChangeString => Change > 0 ? $"+{PercentageChange:F2}%" : $"{PercentageChange:F2}%";
    private string PreChangeColor => Change > 0 ? "green" : "red";

    private double TwoHundredChange;
    private double TwoHundredPercentageChange;
    private string TwoHundredChangeString => Change > 0 ? $"+{Change:F2}" : $"{Change:F2}";
    private string TwoHundredPercentageChangeString => Change > 0 ? $"+{PercentageChange:F2}%" : $"{PercentageChange:F2}%";
    private string TwoHundredChangeColor => Change > 0 ? "green" : "red";

    private double FiftyTwoChange;
    private double FiftyTwoPercentageChange;
    private string FiftyTwoChangeString => Change > 0 ? $"+{Change:F2}" : $"{Change:F2}";
    private string FiftyTwoPercentageChangeString => Change > 0 ? $"+{PercentageChange:F2}%" : $"{PercentageChange:F2}%";
    private string FiftyTwoChangeColor => Change > 0 ? "green" : "red";

    JustifyContent Justification = JustifyContent.FlexStart;
    int Spacing = 1;

    protected override async Task OnInitializedAsync()
    {
        Data = await LoadData(Symbol);
        Change = Data.RegularMarketChange;
        PercentageChange = Data.RegularMarketChangePercent;
        PreChange = Data.PreMarketChange;
        PrePercentageChange = Data.PreMarketChangePercent;
        TwoHundredChange = Data.TwoHundredDayAverage;
        TwoHundredPercentageChange = Data.TwoHundredDayAverageChangePercent;
        FiftyTwoChange = Data.FiftyDayAverageChange;
        FiftyTwoPercentageChange = Data.FiftyDayAverageChangePercent;
    }

    private async Task<Result> LoadData(string symbol)
    {
        var quoteData = await quoteService.GetQuote(Symbol);
        Data = quoteData.QuoteResponse.Result[0];

        return Data;
    }
}