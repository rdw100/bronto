@using Bronto.Models.Api.Quote
@using Bronto.Shared
@using Bronto.Stocks.Pwa.Interfaces
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Globalization
@inject IQuoteService quoteService

@if (Data != null)
{
    <h3>@Data.Symbol: @Data.FullExchangeName</h3>

    <h4>
        <span>@Data.RegularMarketPrice.ToString("C", CultureInfo.CurrentCulture) @Data.Currency</span>
        <span style="color: @ChangeColor;">@ChangeString</span>
        <span style="color: @ChangeColor;">(@PercentageChangeString)</span>
    </h4>
    
    <h6>Updated: @UnixTimestampCalculator.ToDateTime(Data.RegularMarketTime)</h6>
}
else
{
    <p>Loading ...</p>
    <div style="width: 300px;display: grid; grid-gap: 12px; grid-auto-flow: column;">
        <FluentProgressRing></FluentProgressRing>
    </div>
}

@code {
    private Result Data { get; set; }

    [Parameter]
    public string Symbol { get; set; } 

    private double Change;
    private double PercentageChange;  
    private string ChangeString => Change > 0 ? $"+{Change:F2}" : $"{Change:F2}";
    private string PercentageChangeString => Change > 0 ? $"+{PercentageChange:F2}%" : $"{PercentageChange:F2}%";
    private string ChangeColor => Change > 0 ? "green" : "red";

    protected override async Task OnInitializedAsync()
    {
        Data = await LoadData(Symbol);
        Change = Data.RegularMarketChange;
        PercentageChange = Data.RegularMarketChangePercent;
    }

    private async Task<Result> LoadData(string symbol)
    {
        var quoteData = await quoteService.GetQuote(Symbol);
        Data = quoteData.QuoteResponse.Result[0];

        // Change = Data.RegularMarketChange;
        // PercentageChange = Data.PreMarketChangePercent;

        return Data;
    }
}