@page "/charttoolbar"
@using Microsoft.FluentUI.AspNetCore.Components
@using ScottPlot
@using ScottPlot.Blazor

<FluentToolbar Style="border: 4px dashed var(--accent-fill-rest); width: 100%; margin-bottom: 24px;">
    <FluentSelect @bind-Value="selectedChartType" @onchange="HandleChartTypeChange" TOption="string">
        <FluentOption Value="Moving">Moving</FluentOption>
        <FluentOption Value="Bollinger">Bollinger</FluentOption>
        <FluentOption Value="Candlestick">Candlestick</FluentOption>
    </FluentSelect>

    <FluentSelect @bind-Value="selectedInterval" @onchange="HandleIntervalChange" TOption="string">
        <FluentOption Value="1h">1 Hour</FluentOption>
        <FluentOption Value="4h">4 Hours</FluentOption>
        <FluentOption Value="1d">1 Day</FluentOption>
    </FluentSelect>

    <FluentRadioGroup @bind-Value="selectedRange" @onchange="HandleRangeChange" TValue="string">
        <FluentRadio Value=@("1d")>1 Day</FluentRadio>
        <FluentRadio Value=@("5d")>5 Days</FluentRadio>
        <FluentRadio Value=@("1mo")>1 Month</FluentRadio>
        <FluentRadio Value=@("3mo")>3 Months</FluentRadio>
    </FluentRadioGroup>

    <FluentDatePicker @onchange="HandleDateChangeStart" />
    <FluentDatePicker @onchange="HandleDateChangeEnd" />
</FluentToolbar>

@code {
    [Parameter] public EventCallback<string> OnChartTypeChanged { get; set; }
    [Parameter] public EventCallback<string> OnIntervalChanged { get; set; }
    [Parameter] public EventCallback<string> OnRangeChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> OnStartDateChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> OnEndDateChanged { get; set; }

    private string selectedChartType = "Moving";
    private string selectedInterval = "1d";
    private string selectedRange = "5d";
    private DateTime? startDate = DateTime.Today.AddDays(-7);
    private DateTime? endDate = DateTime.Today;

    private async Task HandleChartTypeChange(ChangeEventArgs e)
    {
        string targetValue = e.Value?.ToString();

        if (targetValue == "Moving" || targetValue == "Bollinger" || targetValue == "Candlestick")
        {
            selectedChartType = targetValue;
            await OnChartTypeChanged.InvokeAsync(selectedChartType);
        }
    }
    
    private async Task HandleIntervalChange(ChangeEventArgs e)
    {
        string targetValue = e.Value?.ToString();

        if (targetValue == "1h" || targetValue == "4h" || targetValue == "1d")
        {
            selectedInterval = targetValue;
            await OnIntervalChanged.InvokeAsync(selectedInterval);
        }
    }

    private async Task HandleRangeChange(ChangeEventArgs e)
    {
        string targetValue = e.Value?.ToString();

        if (targetValue == "1d" || targetValue == "5d" || targetValue == "1mo" || targetValue == "3mo")
        {
            selectedRange = targetValue;
            await OnRangeChanged.InvokeAsync(selectedRange);
        }
    }

    private async Task HandleDateChangeStart(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dateValue))
        {
            startDate = dateValue;
            await OnStartDateChanged.InvokeAsync(startDate);
        }
    }

    private async Task HandleDateChangeEnd(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dateValue))
        {
            endDate = dateValue;
            await OnEndDateChanged.InvokeAsync(endDate);
        }
    }
}