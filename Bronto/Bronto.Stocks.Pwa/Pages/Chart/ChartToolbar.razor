@page "/charttoolbar"
@using Microsoft.FluentUI.AspNetCore.Components
@using ScottPlot
@using ScottPlot.Blazor

<FluentToolbar>
    <FluentSelect @onchange="HandleChange" TOption="string">
        <FluentOption value="Moving">Moving</FluentOption>
        <FluentOption value="Bolinger">Bolinger</FluentOption>
        <FluentOption value="Candlestick">Candlestick</FluentOption>
    </FluentSelect>

    <FluentSelect @onchange="HandleChange" TOption="string">
        <FluentOption value="1h">1 Hour</FluentOption>
        <FluentOption value="4h">4 Hours</FluentOption>
        <FluentOption value="1d">1 Day</FluentOption>
    </FluentSelect>

    <FluentRadioGroup @bind-Value="selectedRange" @onchange="HandleChange" >
        <FluentRadio value="1d">1 Day</FluentRadio>
        <FluentRadio value="5d">5 Days</FluentRadio>
        <FluentRadio value="1m">1 Month</FluentRadio>
        <FluentRadio value="3m">3 Month</FluentRadio>
    </FluentRadioGroup>

    <FluentDatePicker @onchange="HandleDateChangeStart" />
    <FluentDatePicker @onchange="HandleDateChangeEnd" />
</FluentToolbar>

@code {
    [Parameter] public EventCallback<string> OnChartTypeChanged { get; set; }
    [Parameter] public EventCallback<string> OnIntervalChanged { get; set; }
    [Parameter] public EventCallback<string> OnRangeChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> OnStartDateChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> OnEndDateChanged { get; set; }

    private string selectedChartType = "Moving";
    private string selectedInterval = "1d";
    private string selectedRange = "5d";
    private DateTime? startDate = DateTime.Today.AddDays(-7);
    private DateTime? endDate = DateTime.Today;

    private async Task HandleChange(ChangeEventArgs e)
    {
        string targetValue = e.Value?.ToString();

        if (targetValue == "Moving" || targetValue == "Bolinger" || targetValue == "Candlestick")
        {
            selectedChartType = targetValue;
            await OnChartTypeChanged.InvokeAsync(selectedChartType);
        }
        else if (targetValue == "1h" || targetValue == "4h" || targetValue == "1d")
        {
            selectedInterval = targetValue;
            await OnIntervalChanged.InvokeAsync(selectedInterval);
        }
        else if (targetValue == "5d" || targetValue == "1m" || targetValue == "3m")
        {
            selectedRange = targetValue;
            await OnRangeChanged.InvokeAsync(selectedRange);
        }
    }

    private async Task HandleDateChangeStart(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dateValue))
        {
            startDate = dateValue;
            await OnStartDateChanged.InvokeAsync(startDate);
        }
    }

    private async Task HandleDateChangeEnd(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dateValue))
        {
            endDate = dateValue;
            await OnEndDateChanged.InvokeAsync(endDate);
        }
    }
}