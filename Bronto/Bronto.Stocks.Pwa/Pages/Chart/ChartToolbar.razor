@page "/charttoolbar"
@using Bronto.Models.Enums
@using Microsoft.FluentUI.AspNetCore.Components
@using ScottPlot
@using ScottPlot.Blazor

<FluentToolbar Style="border: 4px dashed var(--accent-fill-rest); width: 100%; margin-bottom: 24px;">
    <FluentSelect Id="chart-listbox" @bind-Value="selectedChartType" @onchange="HandleChartTypeChange" TOption="string">
        <FluentOption Value="Moving">Moving</FluentOption>
        <FluentOption Value="Bollinger">Bollinger</FluentOption>
        <FluentOption Value="Candlestick">Candlestick</FluentOption>
    </FluentSelect>

    <FluentSelect Id="interval-listbox" @bind-Value="selectedInterval" @onchange="HandleIntervalChange" TOption="string">
        <FluentOption Value=@("5m")>5 min</FluentOption>
        <FluentOption Value=@("15m")>15 min</FluentOption>
        <FluentOption Value=@("30m")>30 min</FluentOption>
        <FluentOption Value=@("1h")>1 Hour</FluentOption>
        <FluentOption Value=@("1d")>1 Day</FluentOption>
    </FluentSelect>

    <FluentRadioGroup @bind-Value="selectedRange" @onchange="HandleRangeChange" TValue="StockRange">
        <FluentRadio Value=@(StockRange.OneDay)>1D</FluentRadio>
        <FluentRadio Value=@(StockRange.FiveDays) Checked="true">5D</FluentRadio>
        <FluentRadio Value=@(StockRange.OneMonth)>1M</FluentRadio>
        <FluentRadio Value=@(StockRange.ThreeMonths)>3M</FluentRadio>
        <FluentRadio Value=@(StockRange.SixMonths)>6M</FluentRadio>
        <FluentRadio Value=@(StockRange.OneYear)>1Y</FluentRadio>
    </FluentRadioGroup>

    <FluentDatePicker @onchange="HandleDateChangeStart" />
    <FluentDatePicker @onchange="HandleDateChangeEnd" />
</FluentToolbar>

@code {
    [Parameter] public EventCallback<string> OnChartTypeChanged { get; set; }
    [Parameter] public EventCallback<string> OnIntervalChanged { get; set; }
    [Parameter] public EventCallback<StockRange> OnRangeChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> OnStartDateChanged { get; set; }
    [Parameter] public EventCallback<DateTime?> OnEndDateChanged { get; set; }

    private string selectedChartType = "Moving";
    private string selectedInterval = "1d";
    private StockRange selectedRange = StockRange.FiveDays;
    private DateTime? startDate = DateTime.Today.AddDays(-7);
    private DateTime? endDate = DateTime.Today;

    private async Task HandleChartTypeChange(ChangeEventArgs e)
    {
        string targetValue = e.Value?.ToString();

        if (targetValue == "Moving" || targetValue == "Bollinger" || targetValue == "Candlestick")
        {
            selectedChartType = targetValue;
            await OnChartTypeChanged.InvokeAsync(selectedChartType);
        }
    }

    private async Task HandleIntervalChange(ChangeEventArgs e)
    {
        string targetValue = e.Value?.ToString();

        if (targetValue == "5m" || targetValue == "15m" || targetValue == "30m" || targetValue == "1h" || targetValue == "1d")
        {
            selectedInterval = targetValue;
            await OnIntervalChanged.InvokeAsync(selectedInterval);
        }
    }

    private async Task HandleRangeChange(ChangeEventArgs e)
    {
        //string targetValue = e.Value?.ToString();
        // if (e.Value is string value && Enum.TryParse(typeof(StockRange), value, out var result))
        // {           
        // }

        StockRange targetValue = e.Value is string value && Enum.TryParse(value, out StockRange result) ? result : throw new ArgumentException("Invalid range selected");
        //targetValue = (StockRange)targetValue;
        //StockRange targetValue = (StockRange)e.Value;

        if (targetValue == StockRange.OneDay 
            || targetValue == StockRange.FiveDays 
            || targetValue == StockRange.OneMonth 
            || targetValue == StockRange.ThreeMonths 
            || targetValue == StockRange.SixMonths 
            || targetValue == StockRange.OneYear)
        {
            selectedRange = targetValue;
            await OnRangeChanged.InvokeAsync(selectedRange);
        }
    }

    private async Task HandleDateChangeStart(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dateValue))
        {
            startDate = dateValue;
            await OnStartDateChanged.InvokeAsync(startDate);
        }
    }

    private async Task HandleDateChangeEnd(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dateValue))
        {
            endDate = dateValue;
            await OnEndDateChanged.InvokeAsync(endDate);
        }
    }
}