@page "/chartdisplay"
@using Bronto.Models.Api.Chart
@using Bronto.Shared
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@using ScottPlot.Blazor
@using ScottPlot.Finance
@using ScottPlot.Plottable
@using ScottPlot
@inject IChartService chartService

<BlazorPlot @ref="blazorPlot" Style="@(ChartStyles)" />

@code {
    [Parameter]
    public string ChartStyles { get; set; }

    private BlazorPlot blazorPlot;

    public async Task RefreshChart(string symbol, string chartType, string interval, string range, DateTime? startDate, DateTime? endDate)
    {
        var plt = blazorPlot.Plot;
        plt.Clear();

        // Generate sample data based on range and interval
        List<OHLC> prices = new();
        switch (range)
        {
            case "1d":
                prices = await LoadData(symbol, interval, range);
                break;
            case "5d":
                prices = await LoadData(symbol, interval, range);
                break;
            case "1m":
                prices = await LoadData(symbol, interval, range);
                break;
            case "3m":
                prices = await LoadData(symbol, interval, range);
                break;
            default:
                prices = await LoadData(symbol, interval, range);
                break;
        }

        switch (chartType)
        {
            case "Moving":
                plt.Add.Candlestick(prices);
                plt.Axes.DateTimeTicksBottom();

                if (prices.Count >= 20)
                {
                    plt = ChartHelper.PlotSmaCurves(plt, prices);
                    plt.ShowLegend();
                }
                break;
            case "Bollinger":
                plt.Add.Candlestick(prices);
                plt.Axes.DateTimeTicksBottom();

                if (prices.Count >= 20)
                {
                    plt = ChartHelper.PlotBollinger(plt, prices);
                    plt.ShowLegend();
                }
                break;
            case "Candlestick": 
                plt.Add.Candlestick(prices);
                plt.Axes.DateTimeTicksBottom();
                break;
        }

        plt.Title($"Data for {range} - {interval} - {chartType}");
        plt.XLabel("Time");
        plt.YLabel("Price");

        blazorPlot.Refresh();
    }

    private async Task<List<OHLC>> LoadData(string symbol, string interval, string range)
    {
        ChartResult ChartDataList = new();
        ChartDataList = await chartService.GetChartData(symbol, interval, range);

        TimeSpan intervalTimeSpan = new();
        switch (interval)
        {
            case "5m":
                intervalTimeSpan = TimeSpan.FromMinutes(5);
                break;
            case "15m":
                intervalTimeSpan = TimeSpan.FromMinutes(15);
                break;
            case "30m":
                intervalTimeSpan = TimeSpan.FromMinutes(30);
                break;
            case "1h":
                intervalTimeSpan = TimeSpan.FromHours(1);
                break;
            case "1d":
                intervalTimeSpan = TimeSpan.FromDays(1);
                break;
            default:
                throw new ArgumentException("Invalid interval");
        }

        List<OHLC> ohlcList = ChartDataList.Chart.Result[0].Indicators.Quote[0].Open
            .Select((open, index) => new OHLC
                {
                    Open = open,
                    High = ChartDataList.Chart.Result[0].Indicators.Quote[0].High[index],
                    Low = ChartDataList.Chart.Result[0].Indicators.Quote[0].Low[index],
                    Close = ChartDataList.Chart.Result[0].Indicators.Quote[0].Close[index],
                    DateTime = UnixTimestampCalculator.ToDateTime(ChartDataList.Chart.Result[0].Timestamp[index]),
                    TimeSpan = intervalTimeSpan 
                    // TimeSpan.FromDays(1) // (range == "1d") ? TimeSpan.FromHours(1) : TimeSpan.FromDays(1)
                })
            .ToList();

        return ohlcList;
    }
}
