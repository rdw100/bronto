@page "/chartdisplay"
@using ScottPlot
@using ScottPlot.Blazor

@code {
    [Parameter] public string ChartType { get; set; }
    [Parameter] public string DataRange { get; set; }

    BlazorPlot ChartPlot { get; set; } = new();

    protected override void OnInitialized()
    {
        UpdateChart();
    }

    protected override void OnParametersSet()
    {
        UpdateChart();
    }

    private async void UpdateChart()
    {
        int range = DataRange switch
        {
            "1d" => 1,
            "5d" => 5,
            "1m" => 30,
            _ => 1
        };

        //var data = await GetDataAsync("AAPL", range);
        var prices = Generate.RandomOHLCs(30);

        ChartPlot.Plot.Clear();

        switch (ChartType)
        {
            case "Bollinger":
                ChartPlot.Plot.Add.Candlestick(prices);
                ChartPlot.Plot.Axes.DateTimeTicksBottom();
                //Plot.Add.Bollinger(data);
                //ScottPlot.Finance.BollingerBands bb = new(prices, 20);
                break;
            case "Candlestick":
                ChartPlot.Plot.Add.Candlestick(prices);
                ChartPlot.Plot.Axes.DateTimeTicksBottom();
                break;
            case "OHLC":
                //ChartPlot.Plot.Add.OHLC(prices);
                ChartPlot.Plot.Add.Signal(Generate.Sin());
                break;
        }

        ChartPlot.Refresh();
        StateHasChanged();
    }

    private Task<List<OHLC>> GetDataAsync(string symbol, int range)
    {
        // Generate random data for testing
        var random = new Random();
        var data = new List<OHLC>();
        for (int i = 0; i < range; i++)
        {
            double open = random.NextDouble() * 100;
            double close = random.NextDouble() * 100;
            double high = Math.Max(open, close) + random.NextDouble() * 10;
            double low = Math.Min(open, close) - random.NextDouble() * 10;
            data.Add(new OHLC(open, high, low, close, DateTime.Now.AddDays(-i), TimeSpan.FromDays(1.0)));
        }
        return Task.FromResult(data);
    }
}

<div>
    <BlazorPlot @ref=ChartPlot Style="width: 400px; height: 300px;" />
</div>