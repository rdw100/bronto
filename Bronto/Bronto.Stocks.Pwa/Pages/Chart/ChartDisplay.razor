@page "/chartdisplay"
@using ScottPlot.Blazor
@using ScottPlot.Plottable
@using ScottPlot

<BlazorPlot @ref="blazorPlot" Style="width:500px;height:250px;" />

@code {
    private BlazorPlot blazorPlot;

    public async Task RefreshChart(string chartType, string interval, string range, DateTime? startDate, DateTime? endDate)
    {
        var plt = blazorPlot.Plot;
        plt.Clear();

        // Generate sample data based on range and interval
        double[] data;
        List<OHLC> prices = new();
        switch (range)
        {
            case "5d":
                prices = Generate.RandomOHLCs(5);
                break;
            case "1m":
                prices = Generate.RandomOHLCs(30);
                break;
            case "3m":
                prices = Generate.RandomOHLCs(90);
                break;
            default:
                prices = Generate.RandomOHLCs(1);
                break;
        }

        switch (chartType)
        {
            case "Moving":
                plt.Add.Candlestick(prices);
                plt.Axes.DateTimeTicksBottom();
                await ChartHelper.PlotSmaCurves(blazorPlot, prices);
                plt.ShowLegend();
                break;
            case "Bolinger":
                plt.Add.Candlestick(prices);
                plt.Axes.DateTimeTicksBottom();
                await ChartHelper.PlotBolinger(blazorPlot, prices);
                break;
            case "Candlestick":
                plt.Add.Candlestick(prices);
                plt.Axes.DateTimeTicksBottom();
                break;
        }

        plt.Title($"Data for {range} - {interval} - {chartType}");
        plt.XLabel("Time");
        plt.YLabel("Value");

        blazorPlot.Refresh();
    }
}
