@page "/ohlc"
@using AutoMapper
@using Bronto.Models.Api
@using Bronto.Stocks.Pwa.Interfaces
@using Bronto.Stocks.Pwa.Services
@using ScottPlot
@using ScottPlot.Blazor
@inject IStockService stockService

<h1>ScottPlot 5 in Blazor</h1>
<h2>Financial Plot</h2>
<h3>OHLC Chart</h3>

<FluentDesignTheme @bind-Mode="@Mode" StorageName="theme" />
<BlazorPlot @ref=BlazorPlot Style="width: 600px; height: 500px;"/>

@code {
    public DesignThemeModes Mode { get; set; }
    private StockDataTimeSeries StockDataList;
    private List<OHLC> prices { get; set; } = new();
    BlazorPlot BlazorPlot { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        prices = await GetStocks();

        BlazorPlot.Plot.Add.OHLC(prices);
        BlazorPlot.Plot.Axes.DateTimeTicksBottom();
        BlazorPlot.Plot.XLabel("Time");
        BlazorPlot.Plot.YLabel("Price");
        BlazorPlot.Plot.Title("OHLC");
        BlazorPlot.Refresh();

        if (Mode == DesignThemeModes.Dark)
        {
            // change figure colors
            BlazorPlot.Plot.FigureBackground.Color = ScottPlot.Color.FromHex("#181818");
            BlazorPlot.Plot.DataBackground.Color = ScottPlot.Color.FromHex("#1f1f1f");

            // change axis and grid colors
            BlazorPlot.Plot.Axes.Color(ScottPlot.Color.FromHex("#d7d7d7"));
            BlazorPlot.Plot.Grid.MajorLineColor = ScottPlot.Color.FromHex("#404040");

            // change legend colors
            BlazorPlot.Plot.Legend.BackgroundColor = ScottPlot.Color.FromHex("#404040");
            BlazorPlot.Plot.Legend.FontColor = ScottPlot.Color.FromHex("#d7d7d7");
            BlazorPlot.Plot.Legend.OutlineColor = ScottPlot.Color.FromHex("#d7d7d7");
        };
    }

    protected async Task<List<OHLC>> GetStocks()
    {
        StockDataList = await stockService.GetTimeSeriesAsync("AAPL", "1day", "30");

        @if (StockDataList != null)
        {
            // Use AutoMapper mapping ScottPlot's OHLC
            var config = new MapperConfiguration(cfg => cfg.CreateMap<TimeSeriesValues, OHLC>());
            var mapper = config.CreateMapper();
            prices = mapper.Map<List<OHLC>>(StockDataList.Values.ToList());
        }
        return prices;
    }
}