@page "/MyChart"
@using BlazorPro.BlazorSize
@using Bronto.Models.Enums
@using ScottPlot
@using ScottPlot.Blazor
@using Microsoft.FluentUI.AspNetCore.Components
@inject IResizeListener listener

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

<h3>Height: @browser.Height</h3>
<h3>Width: @browser.Width</h3>
<h3>MQ: @IsXSmallMedia</h3>
<h4>Chart: @selectedOption</h4>
<h4>Interval: @selectedInterval</h4>
<h4>Range: @selectedRange</h4>

<FluentToolbar id="toolbar-fluent-components" Style="border: 4px dotted var(--accent-fill-rest); width:100%; margin-bottom: 24px;">
    <FluentDatePicker Label="Start Date" />
    <FluentDatePicker Label="End Date" />

    <FluentRadioGroup @bind-Value=selectedRange >
        <FluentRadio Value=@(StockRange.OneDay.GetStringValue()) Checked="true">1D</FluentRadio>
        <FluentRadio Value=@(StockRange.FiveDays.GetStringValue())>5D</FluentRadio>
        <FluentRadio Value=@(StockRange.OneMonth.GetStringValue())>1M</FluentRadio>
        <FluentRadio Value=@(StockRange.ThreeMonths.GetStringValue())>3M</FluentRadio>
        <FluentRadio Value=@(StockRange.SixMonths.GetStringValue())>6M</FluentRadio>
        <FluentRadio Value=@(StockRange.OneYear.GetStringValue())>1Y</FluentRadio>
    </FluentRadioGroup>
    <FluentSelect Name="ChartInterval" Id="ChartInterval" TOption="string" @bind-Value="@selectedInterval">
        <FluentOption Value="1h">1h</FluentOption>
        <FluentOption Value="4h">4h</FluentOption>
        <FluentOption Value="1d">1d</FluentOption>
    </FluentSelect>
    <FluentSelect Name="TbChartType" Id="TbChartType" TOption="string" @bind-Value="@selectedOption">
        <FluentOption Value="Bollinger">Bolinger</FluentOption>
        <FluentOption Value="Candlestick">Candlestick</FluentOption>
        <FluentOption Value="Moving">Moving</FluentOption>
        <FluentOption Value="OHLC">OHLC</FluentOption>
    </FluentSelect>
    <FluentButton OnClick="() => RefreshChildComponent()">Refresh Child Component</FluentButton>
</FluentToolbar>

<FluentGrid Spacing="2" AdaptiveRendering="true" Justify="JustifyContent.Center" Style="padding: 4px; ">
    <FluentGridItem xs="12">
        <div class="card">
            xs="12"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6" HiddenWhen="GridItemHidden.SmAndDown">
        <div class="card">
            xs="12" sm="6" Hidden="SmAndDown"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <div class="card">
            xs="12" sm="6"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="3">
        <div class="card">
            xs="3"
        </div>
    </FluentGridItem>
</FluentGrid>

@if (selectedOption == "Candlestick")
{
    <Candlestick 
        @ref="candlestickChart" 
        ChartStyles="@(chartStyle)" 
        Interval="@selectedInterval" 
        Range="@selectedRange"/>
}
else if (selectedOption == "Bollinger")
{
    <Bollinger ChartStyles="@(chartStyle)" />
}
else if (selectedOption == "Moving")
{
    <Moving ChartStyles="@(chartStyle)" />
}
else if (selectedOption == "OHLC")
{
    <Ohlc ChartStyles="@(chartStyle)" />
}

@code {
    string selectedOption = "Candlestick";
    string selectedInterval = "1d";
    string selectedRange = "5d";
    private string chartStyle = "width: 1024px; height: 768px;";
    private Candlestick candlestickChart;

    BrowserWindowSize browser = new BrowserWindowSize();

    bool IsXSmallMedia = false;
    bool IsMediumMedia = false;
    bool IsLargeMedia = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.OnResized += WindowResized;
        }        
    }

    async void WindowResized(object _, BrowserWindowSize window)
    {
        // Get the browsers's width / height
        browser = window;

        // Check a media query to see if it was matched. We can do this at any time, but it's best to check on each resize
        IsXSmallMedia = await listener.MatchMedia(Breakpoints.XSmallDown);
        IsMediumMedia = await listener.MatchMedia(Breakpoints.MediumDown);
        IsLargeMedia = await listener.MatchMedia(Breakpoints.LargeDown);

        if (window.Width < 320)
        {
            chartStyle = "width: 300px; height: 200;";
        }
        else if (IsXSmallMedia || window.Width < 575)
        {
            chartStyle = "width: 500px; height: 300px;";
        }
        else if (IsMediumMedia || window.Width < 990)
        {
            chartStyle = "width: 700px; height: 500px;";
        }
        else if (IsLargeMedia || window.Width < 1199)
        {
            chartStyle = "width: 900px; height: 700px;";
        }

        // We're outside of the component's lifecycle, be sure to let it know it has to re-render.
        StateHasChanged();
    }

    private void RefreshChildComponent()
    {
        candlestickChart.Refresh();
        StateHasChanged();
    }

    public void Dispose()
    {
        listener.OnResized -= WindowResized;
    }
}
