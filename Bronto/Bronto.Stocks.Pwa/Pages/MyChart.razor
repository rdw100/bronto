@page "/MyChart"
@using ScottPlot.Blazor
@using BlazorPro.BlazorSize
@inject IResizeListener listener

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

<h3>Height: @browser.Height</h3>
<h3>Width: @browser.Width</h3>
<h3>MQ: @IsXSmallMedia</h3>

<BlazorPlot @ref="blazorPlot" Style="@(chartStyle)" />

@code {
    private BlazorPlot blazorPlot;
    private string chartStyle = "width: 150px; height: 150px;";

    BrowserWindowSize browser = new BrowserWindowSize();

    bool IsXSmallMedia = false;
    bool IsMediumMedia = false;
    bool IsLargeMedia = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.OnResized += WindowResized;
        }
    }

    async void WindowResized(object _, BrowserWindowSize window)
    {
        // Get the browsers's width / height
        browser = window;

        // Check a media query to see if it was matched. We can do this at any time, but it's best to check on each resize
        IsXSmallMedia = await listener.MatchMedia(Breakpoints.XSmallDown);
        IsMediumMedia = await listener.MatchMedia(Breakpoints.MediumDown);
        IsLargeMedia = await listener.MatchMedia(Breakpoints.LargeDown);

        if (window.Width < 320)
        {
            chartStyle = "width: 300px; height: 200;";
        }
        else if (IsXSmallMedia || window.Width < 575)
        {
            chartStyle = "width: 500px; height: 300px;";
        }
        else if (IsMediumMedia || window.Width < 990)
        {
            chartStyle = "width: 700px; height: 500px;";
        }
        else if (IsLargeMedia || window.Width < 1199)
        {
            chartStyle = "width: 900px; height: 700px;";
        }

        // We're outside of the component's lifecycle, be sure to let it know it has to re-render.
        StateHasChanged();
    }

    public void Dispose()
    {
        listener.OnResized -= WindowResized;
    }
}
