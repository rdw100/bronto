@page "/MyChart"
@using BlazorPro.BlazorSize
@using ScottPlot
@using ScottPlot.Blazor
@using Microsoft.FluentUI.AspNetCore.Components
@inject IResizeListener listener

<p>This component demonstrates adaptive rendering of a Blazor UI.</p>

<h3>Height: @browser.Height</h3>
<h3>Width: @browser.Width</h3>
<h3>MQ: @IsXSmallMedia</h3>

<FluentToolbar id="toolbar-fluent-components" Style="border: 4px dotted var(--accent-fill-rest); width:100%; margin-bottom: 24px;">
    <FluentDatePicker Label="Start Date" />
    <FluentDatePicker Label="End Date" />
    <FluentButton Appearance="Appearance.Outline">1D</FluentButton>
    <FluentButton Appearance="Appearance.Outline">5D</FluentButton>
    <FluentButton Appearance="Appearance.Outline">1M</FluentButton>
    <FluentButton Appearance="Appearance.Outline">3M</FluentButton>
    <FluentButton Appearance="Appearance.Outline">6M</FluentButton>
    <FluentButton Appearance="Appearance.Outline">1Y</FluentButton>
    <FluentSelect Name="Interval" Id="Interval" TOption="string">
        <FluentOption>1h</FluentOption>
        <FluentOption>4h</FluentOption>
        <FluentOption>1d</FluentOption>
    </FluentSelect>
    <FluentSelect Name="TbChartType" Id="TbChartType" TOption="string" @bind-Value="@selectedOption">
        <FluentOption Value="Bolinger">Bolinger</FluentOption>
        <FluentOption Value="Candlestick">Candlestick</FluentOption>
        <FluentOption Value="Moving">Moving</FluentOption>
        <FluentOption Value="OHLC">OHLC</FluentOption>
    </FluentSelect>     
</FluentToolbar>

<FluentStack Style="margin-bottom: 24px;" VerticalAlignment="VerticalAlignment.Center">
    <FluentDatePicker Label="Start Date" />
    <FluentDatePicker Label="End Date" />
    <FluentButton Appearance="Appearance.Outline">1D</FluentButton>
    <FluentButton Appearance="Appearance.Outline">5D</FluentButton>
    <FluentButton Appearance="Appearance.Outline">1M</FluentButton>
    <FluentButton Appearance="Appearance.Outline">3M</FluentButton>
    <FluentButton Appearance="Appearance.Outline">6M</FluentButton>
    <FluentButton Appearance="Appearance.Outline">1Y</FluentButton>
    <FluentSelect Name="Interval" Id="Interval" TOption="string">
        <FluentOption>1h</FluentOption>
        <FluentOption>4h</FluentOption>
        <FluentOption>1d</FluentOption>
    </FluentSelect>
    <FluentSelect Name="ChartType" Id="ChartType" TOption="string">
        <FluentOption>Bolinger</FluentOption>
        <FluentOption>Candlestick</FluentOption>
        <FluentOption>Moving</FluentOption>
        <FluentOption>OHLC</FluentOption>
    </FluentSelect>
</FluentStack>

<FluentGrid Spacing="2" AdaptiveRendering="true" Justify="JustifyContent.Center" Style="padding: 4px; ">
    <FluentGridItem xs="12">
        <div class="card">
            xs="12"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6" HiddenWhen="GridItemHidden.SmAndDown">
        <div class="card">
            xs="12" sm="6" Hidden="SmAndDown"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="6">
        <div class="card">
            xs="12" sm="6"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="6" sm="3">
        <div class="card">
            xs="6" sm="3"
        </div>
    </FluentGridItem>
    <FluentGridItem xs="3">
        <div class="card">
            xs="3"
        </div>
    </FluentGridItem>
</FluentGrid>

@if (selectedOption == "Candlestick")
{
    <BlazorPlot @ref="blazorPlotCandlestick" Style="@(chartStyle)" />
}
else if (selectedOption == "Bolinger")
{
    <BlazorPlot @ref="blazorPlotBolinger" Style="@(chartStyle)" />
}

@code {
    BlazorPlot blazorPlotCandlestick { get; set; } = new();
    BlazorPlot blazorPlotBolinger { get; set; } = new();

    string selectedOption = "Candlestick";
    private string chartStyle = "width: 1024px; height: 768px;";

    BrowserWindowSize browser = new BrowserWindowSize();

    bool IsXSmallMedia = false;
    bool IsMediumMedia = false;
    bool IsLargeMedia = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Subscribe to the OnResized event. This will do work when the browser is resized.
            listener.OnResized += WindowResized;
        }
        if (selectedOption == "Candlestick")
        {
            // Generate OHLC data for 5 days
            List<OHLC> prices = new();
            DateTime currentDate = DateTime.Now.Date;
            TimeSpan timeSpan = TimeSpan.FromDays(1);

            for (int i = 0; i < 5; i++)
            {
                double open = Generate.RandomNumber(100, 200);
                double close = Generate.RandomNumber(100, 200);
                double high = Math.Max(open, close) + Generate.RandomNumber(5);
                double low = Math.Min(open, close) - Generate.RandomNumber(5);

                prices.Add(new OHLC(open, high, low, close, currentDate, timeSpan));
                currentDate = currentDate.AddDays(1);
            }

            blazorPlotCandlestick.Plot.Add.Candlestick(prices);
            blazorPlotCandlestick.Plot.Axes.DateTimeTicksBottom();
        }
        else if (selectedOption == "Bolinger")
        {
            // Generate some sample data for line and bar chart
            double[] prices = { 100, 110, 105, 120, 125 };
            double[] volumes = { 1.000, 1.200, .900, 1.500, 1.300 };
            double[] daysNumeric = { 1, 2, 3, 4, 5 };

            blazorPlotBolinger.Plot.Add.Scatter(daysNumeric, prices);// Signal(prices);
            blazorPlotBolinger.Plot.Add.Bars(daysNumeric, volumes);
            blazorPlotBolinger.Plot.XLabel("Volume (Millions)");
            blazorPlotBolinger.Plot.YLabel("Price");
        }
    }

    async void WindowResized(object _, BrowserWindowSize window)
    {
        // Get the browsers's width / height
        browser = window;

        // Check a media query to see if it was matched. We can do this at any time, but it's best to check on each resize
        IsXSmallMedia = await listener.MatchMedia(Breakpoints.XSmallDown);
        IsMediumMedia = await listener.MatchMedia(Breakpoints.MediumDown);
        IsLargeMedia = await listener.MatchMedia(Breakpoints.LargeDown);

        if (window.Width < 320)
        {
            chartStyle = "width: 300px; height: 200;";
        }
        else if (IsXSmallMedia || window.Width < 575)
        {
            chartStyle = "width: 500px; height: 300px;";
        }
        else if (IsMediumMedia || window.Width < 990)
        {
            chartStyle = "width: 700px; height: 500px;";
        }
        else if (IsLargeMedia || window.Width < 1199)
        {
            chartStyle = "width: 900px; height: 700px;";
        }

        // We're outside of the component's lifecycle, be sure to let it know it has to re-render.
        StateHasChanged();
    }

    public void Dispose()
    {
        listener.OnResized -= WindowResized;
    }
}
